plugins {
    id 'java'
    id 'war'
    id 'jacoco'
    id 'findbugs'
    id 'maven'
    id 'signing'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

group = 'com.after_sunrise.cryptocurrency'
archivesBaseName = 'cryptotrader'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.16"
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'com.after_sunrise.cryptocurrency:bitflyer4j:0.0.9-SNAPSHOT'
    compile 'org.jboss.resteasy:resteasy-jaxrs:3.1.4.Final'
    compile 'org.jboss.resteasy:resteasy-guice:3.1.4.Final'
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    testCompile 'org.testng:testng:6.10'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.eclipse.jetty:jetty-server:9.4.6.v20170531'
    testCompile 'org.eclipse.jetty:jetty-webapp:9.4.6.v20170531'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar.doFirst {
    project.ext {
        vval = archivesBaseName + '.version=' + project.version
        vout = 'build/resources/main/' + archivesBaseName + '-version.properties'
    }
    ant.echo message: project.ext.vval, file: project.ext.vout
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives")
    }
    sign configurations.archives
}

uploadArchives {
    project.ext {
        url = 'https://github.com/after-the-sunrise/' + archivesBaseName
        scm = 'scm:git:https://github.com/after-the-sunrise/' + archivesBaseName + '.git'
        user = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("ossrhUsername")
        pass = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("ossrhPassword")
    }
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: project.ext.user, password: project.ext.pass)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: project.ext.user, password: project.ext.pass)
            }
            pom.project {
                packaging 'jar'
                name archivesBaseName
                description "Trading bot for cryptocurrencies."
                url project.ext.url
                licenses {
                    license {
                        name 'GNU Affero General Public License'
                        url 'https://www.gnu.org/licenses/agpl.txt'
                    }
                }
                developers {
                    developer {
                        name 'Takanori Takase'
                        email 'scm@after-sunrise.com'
                    }
                }
                scm {
                    connection project.ext.scm
                    developerConnection project.ext.scm
                    url project.ext.url
                }
            }
        }
    }
}

test {
    useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

findbugs {
    ignoreFailures = true
}
